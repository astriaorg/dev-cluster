apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.rollupName }}-geth
  labels:
    app: {{ .Values.rollupName }}-astria-dev-cluster
  namespace: astria-dev-cluster
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.rollupName }}-astria-dev-cluster
  template:
    metadata:
      name: {{ .Values.rollupName }}-execution-chain
      labels:
        app: {{ .Values.rollupName }}-astria-dev-cluster
    spec:
      initContainers:
        - name: init-geth
          command: [ "/scripts/init-geth.sh" ]
          image: "ghcr.io/astriaorg/go-ethereum:0.2.0"
          volumeMounts:
            - mountPath: /scripts/
              name: {{ .Values.rollupName }}-executor-scripts-volume
            - mountPath: /home/geth
              name: {{ .Values.rollupName }}-executor-home-vol
          envFrom:
            - configMapRef:
                name: {{ .Values.rollupName }}-geth-env
      containers:
        - name: geth
          command: [ "/scripts/start-geth.sh" ]
          image: "ghcr.io/astriaorg/go-ethereum:0.2.0"
          volumeMounts:
            - mountPath: /scripts/
              name: {{ .Values.rollupName }}-executor-scripts-volume
              readOnly: true
            - mountPath: /home/geth
              name: {{ .Values.rollupName }}-executor-home-vol
          envFrom:
            - configMapRef:
                name: {{ .Values.rollupName }}-geth-env
          ports:
            - containerPort: {{ .Values.ports.jsonRPC }}
              name: json-rpc
            - containerPort: {{ .Values.ports.wsRPC }}
              name: ws-rpc
            - containerPort: {{ .Values.ports.executionGRPC }}
              name: execution-grpc
        - name: composer
          image: "ghcr.io/astriaorg/composer:0.1.0--composer"
          command: [ "/usr/local/bin/astria-composer" ]
          stdin: true
          tty: true
          envFrom:
            - configMapRef:
                name: {{ .Values.rollupName }}-composer-env
        - name: conductor
          image: "ghcr.io/astriaorg/conductor:0.4.0--conductor"
          command: [ "/scripts/start-conductor.sh" ]
          stdin: true
          tty: true
          volumeMounts:
            - mountPath: /scripts/
              name: {{ .Values.rollupName }}-conductor-scripts-volume
              readOnly: true
            - mountPath: /home/conductor
              name: {{ .Values.rollupName }}-conductor-home-vol
          envFrom:
            - configMapRef:
                name: {{ .Values.rollupName }}-conductor-env
          ports:
            - containerPort: {{ .Values.ports.gossipnet }}
              name: gossipnet
      volumes:
        - name: {{ .Values.rollupName }}-executor-scripts-volume
          configMap:
            name: {{ .Values.rollupName }}-executor-scripts
            defaultMode: 0500
        - name: {{ .Values.rollupName }}-conductor-scripts-volume
          configMap:
            name: {{ .Values.rollupName }}-conductor-scripts
            defaultMode: 0500
        - emptyDir: { }
          name: {{ .Values.rollupName }}-executor-home-vol
        - emptyDir: { }
          name: {{ .Values.rollupName }}-conductor-home-vol
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.rollupName }}-faucet
  labels:
    app: {{ .Values.rollupName }}-astria-dev-cluster
  namespace: astria-dev-cluster
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.rollupName }}-astria-dev-cluster
  template:
    metadata:
      name: {{ .Values.rollupName }}-faucet
      labels:
        app: {{ .Values.rollupName }}-astria-dev-cluster
    spec:
      containers:
        - name: faucet
          command: [ "/app/eth-faucet" ]
          args:
            - -httpport={{ .Values.ports.faucet }}
            - -wallet.provider=http://{{ .Values.rollupName }}-evm-service:{{ .Values.ports.jsonRPC }}
            - -wallet.privkey={{ .Values.privateKey }}
          image: "ghcr.io/astriaorg/ria-faucet:0.0.1"
          volumeMounts:
            - mountPath: /home/faucet
              name: {{ .Values.rollupName }}-faucet-home-vol
          ports:
            - containerPort: {{ .Values.ports.faucet }}
              name: faucet
      volumes:
        - emptyDir: { }
          name: {{ .Values.rollupName }}-faucet-home-vol
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.rollupName }}-blockscout
  labels:
    app: {{ .Values.rollupName }}-astria-dev-cluster
  namespace: astria-dev-cluster
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.rollupName }}-astria-dev-cluster
  template:
    metadata:
      name: {{ .Values.rollupName }}-blockscout-local
      labels:
        app: {{ .Values.rollupName }}-astria-dev-cluster
    spec:
      containers:
        - name: blockscout
          command: ["bash"]
          args:
            - -c
            - bin/blockscout eval "Elixir.Explorer.ReleaseTasks.create_and_migrate()" && bin/blockscout start
          image: "docker.io/blockscout/blockscout:5.1.0"
          volumeMounts:
            - mountPath: /app/logs
              name: {{ .Values.rollupName }}-blockscout-logs-vol
          envFrom:
            - configMapRef:
                name: {{ .Values.rollupName }}-blockscout-env
          ports:
            - containerPort: {{ .Values.ports.blockscout }}
              name: blockscout
        - name: postgres
          command: ["docker-entrypoint.sh"]
          args:
            - -c
            - max_connections=200
          env:
            - name: POSTGRES_HOST_AUTH_METHOD
              value: trust
            - name: POSTGRES_PASSWORD
            - name: POSTGRES_USER
              value: postgres
          image: docker.io/library/postgres:14
          ports:
            - containerPort: 5432
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: {{ .Values.rollupName }}-postgres-vol
        - name: redis
          command: ["redis-server"]
          image: docker.io/library/redis:alpine
          ports:
            - containerPort: 6379
          volumeMounts:
            - mountPath: /data
              name: {{ .Values.rollupName }}-redis-vol
        - name: sig-provider
          image: ghcr.io/blockscout/sig-provider:latest@sha256:ae371ce8d0a20993bf61ca81b3394416f4778c9edd398250fd4d81a8d6820950
          ports:
            - containerPort: 8050
        - name: smart-contract-verifier
          image: ghcr.io/blockscout/smart-contract-verifier:v1.3.0@sha256:f07b2d874c28d45f5ba81f297c868a746a03771e8b6d9b8e96f0eba0beeb1016
          envFrom:
            - configMapRef:
                name: {{ .Values.rollupName }}-smart-contract-verifier-env
          ports:
            - containerPort: 8150
        - name: visualizer
          image: ghcr.io/blockscout/visualizer:v0.2.0@sha256:99479da126248e0aba5c32b1e32625f8c527b72924f55cb510b50e5f854b2d15
          envFrom:
            - configMapRef:
                name: {{ .Values.rollupName }}-visualizer-env
          ports:
            - containerPort: 8151
      volumes:
        - emptyDir: {}
          name: {{ .Values.rollupName }}-blockscout-logs-vol
        - emptyDir: {}
          name: {{ .Values.rollupName }}-postgres-vol
        - emptyDir: {}
          name: {{ .Values.rollupName }}-redis-vol
